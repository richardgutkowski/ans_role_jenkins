---

- name: Ensure Jenkins is started
  service:
    name: jenkins
    state: started

- name: Wait for Jenkins to start up before proceeding.
  shell: curl --noproxy '*' --head --silent http://{{ jenkins_hostname }}:{{ jenkins_port }}/cli/
  register: result
  until: result.stdout.find("200 OK") != -1
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  args:
    warn: no

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
    use_proxy: no
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 5

- name: Install proxy groovy script
  template:
    src: proxy.groovy
    dest: "{{ jenkins_home }}/proxy.groovy"
  when: use_proxy

- name: Add proxy settings configuration
  shell: cat {{ jenkins_home }}/proxy.groovy | java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} groovy =
  when: use_proxy

- name: List plugins
  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} list-plugins | cut -f 1 -d ' '
  when: jenkins_plugins is defined
  register: plugins_installed

- name: Install/Update plugins
  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} install-plugin {{ item }}
  when: "plugins_installed.changed and plugins_installed.stdout.find('{{ item }}') == -1"
  with_items: "{{ jenkins_plugins }}"
  ignore_errors: yes
  notify:
    - Restart Jenkins

- name: List plugins to be updated
  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
  when: jenkins_plugins_update is defined
  register: plugins_updates

- name: Update plugins
  shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_port }} install-plugin {{ item }}
  with_items: plugins_updates.stdout.split()
  when: jenkins_plugins_update is defined and plugins_updates.stdout != ''
  ignore_errors: yes
  notify:
    - Restart Jenkins
